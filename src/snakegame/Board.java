package snakegame;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Board extends javax.swing.JPanel implements Runnable, KeyListener {

    public static final Integer BOARD_HEIGHT = 500;
    public static final Integer BOARD_WIDTH = 500;
    private static final Integer LEVEL = 100;
    private Game game;
    
    public Board(ScoreListener scoreListener) {
        game = new Game(scoreListener);
        initComponents();
        addKeyListener(this);
        new Thread(this).start();
    }

    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        graphics.drawRect(0, 0, BOARD_WIDTH - 1, BOARD_HEIGHT - 1);
        game.paint(graphics);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new Dimension(BOARD_WIDTH, BOARD_HEIGHT));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true) {
            try {
                Thread.sleep(LEVEL);
                game.next();
//                EventQueue.invokeLater(new Runnable() {
//                    public void run() {
                        repaint();
//                    }
//                });            
            } catch (InterruptedException ex) {
                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent keyEvent) {
        
    }

    @Override
    public void keyPressed(KeyEvent keyEvent) {
        switch(keyEvent.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                game.changeDirection(Direction.LEFT, 1);
                break;
            case KeyEvent.VK_RIGHT:
                game.changeDirection(Direction.RIGHT, 1);
                break;
            case KeyEvent.VK_UP:
                game.changeDirection(Direction.UP, 1);
                break;
            case KeyEvent.VK_DOWN:
                game.changeDirection(Direction.DOWN, 1);
                break;
            case KeyEvent.VK_A:
                game.changeDirection(Direction.LEFT, 2);
                break;
            case KeyEvent.VK_S:
                game.changeDirection(Direction.DOWN, 2);
                break;
            case KeyEvent.VK_D:
                game.changeDirection(Direction.RIGHT, 2);
                break;
            case KeyEvent.VK_W:
                game.changeDirection(Direction.UP, 2);
                break;
        }
        if(keyEvent.getKeyCode() == KeyEvent.VK_LEFT) {
            
        } 
    }

    @Override
    public void keyReleased(KeyEvent keyEvent) {
        
    }
}
